// <auto-generated />
using System;
using FindMyFamilyDoc.Business;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FindMyFamilyDoc.Business.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230618192857_DeletingDoctorAvailabilityFromDoctorTable")]
    partial class DeletingDoctorAvailabilityFromDoctorTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(638),
                            CreatedBy = "System",
                            Name = "Toronto",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(643),
                            CreatedBy = "System",
                            Name = "Ottawa",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(648),
                            CreatedBy = "System",
                            Name = "Mississauga",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(653),
                            CreatedBy = "System",
                            Name = "Brampton",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(657),
                            CreatedBy = "System",
                            Name = "Hamilton",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(663),
                            CreatedBy = "System",
                            Name = "London",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(668),
                            CreatedBy = "System",
                            Name = "Markham",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(672),
                            CreatedBy = "System",
                            Name = "Vaughan",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(676),
                            CreatedBy = "System",
                            Name = "Kitchener",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(680),
                            CreatedBy = "System",
                            Name = "Windsor",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(801),
                            CreatedBy = "System",
                            Name = "Richmond Hill",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(806),
                            CreatedBy = "System",
                            Name = "Oakville",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(810),
                            CreatedBy = "System",
                            Name = "Burlington",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(814),
                            CreatedBy = "System",
                            Name = "Greater Sudbury",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(818),
                            CreatedBy = "System",
                            Name = "Waterloo",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(822),
                            CreatedBy = "System",
                            Name = "Oshawa",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(826),
                            CreatedBy = "System",
                            Name = "Barrie",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(830),
                            CreatedBy = "System",
                            Name = "Kingston",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(834),
                            CreatedBy = "System",
                            Name = "Guelph",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(838),
                            CreatedBy = "System",
                            Name = "Thunder Bay",
                            StateId = 7,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(861),
                            CreatedBy = "System",
                            Name = "Calgary",
                            StateId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(866),
                            CreatedBy = "System",
                            Name = "Edmonton",
                            StateId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(870),
                            CreatedBy = "System",
                            Name = "Red Deer",
                            StateId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(874),
                            CreatedBy = "System",
                            Name = "Lethbridge",
                            StateId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(883),
                            CreatedBy = "System",
                            Name = "St. Albert",
                            StateId = 1,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(897),
                            CreatedBy = "System",
                            Name = "Montreal",
                            StateId = 9,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(901),
                            CreatedBy = "System",
                            Name = "Quebec City",
                            StateId = 9,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(905),
                            CreatedBy = "System",
                            Name = "Laval",
                            StateId = 9,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(909),
                            CreatedBy = "System",
                            Name = "Gatineau",
                            StateId = 9,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(914),
                            CreatedBy = "System",
                            Name = "Longueuil",
                            StateId = 9,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(927),
                            CreatedBy = "System",
                            Name = "Moncton",
                            StateId = 4,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(932),
                            CreatedBy = "System",
                            Name = "Saint John",
                            StateId = 4,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(936),
                            CreatedBy = "System",
                            Name = "Fredericton",
                            StateId = 4,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(940),
                            CreatedBy = "System",
                            Name = "Dieppe",
                            StateId = 4,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(943),
                            CreatedBy = "System",
                            Name = "Riverview",
                            StateId = 4,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(960),
                            CreatedBy = "System",
                            Name = "Winnipeg",
                            StateId = 3,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(964),
                            CreatedBy = "System",
                            Name = "Brandon",
                            StateId = 3,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(968),
                            CreatedBy = "System",
                            Name = "Steinbach",
                            StateId = 3,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(972),
                            CreatedBy = "System",
                            Name = "Thompson",
                            StateId = 3,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1030),
                            CreatedBy = "System",
                            Name = "Portage la Prairie",
                            StateId = 3,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1046),
                            CreatedBy = "System",
                            Name = "St. John's",
                            StateId = 5,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1051),
                            CreatedBy = "System",
                            Name = "Mount Pearl",
                            StateId = 5,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1056),
                            CreatedBy = "System",
                            Name = "Conception Bay South",
                            StateId = 5,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1060),
                            CreatedBy = "System",
                            Name = "Paradise",
                            StateId = 5,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1064),
                            CreatedBy = "System",
                            Name = "Corner Brook",
                            StateId = 5,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1078),
                            CreatedBy = "System",
                            Name = "Halifax",
                            StateId = 6,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1082),
                            CreatedBy = "System",
                            Name = "Sydney",
                            StateId = 6,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1086),
                            CreatedBy = "System",
                            Name = "Truro",
                            StateId = 6,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1090),
                            CreatedBy = "System",
                            Name = "New Glasgow",
                            StateId = 6,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1094),
                            CreatedBy = "System",
                            Name = "Glace Bay",
                            StateId = 6,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsAcceptingNewPatients")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WaitingTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "UserId" }, "Unique_UserId_Doctor")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AppointmentLength")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAvailability");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorEducationBackground", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorEducationBackgrounds");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("DoctorLanguages");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DoctorStaffs");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1246),
                            CreatedBy = "System",
                            Name = "English",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1250),
                            CreatedBy = "System",
                            Name = "Spanish",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1254),
                            CreatedBy = "System",
                            Name = "French",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1258),
                            CreatedBy = "System",
                            Name = "German",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1262),
                            CreatedBy = "System",
                            Name = "Italian",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1266),
                            CreatedBy = "System",
                            Name = "Dutch",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1270),
                            CreatedBy = "System",
                            Name = "Russian",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1274),
                            CreatedBy = "System",
                            Name = "Chinese",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1278),
                            CreatedBy = "System",
                            Name = "Japanese",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1281),
                            CreatedBy = "System",
                            Name = "Korean",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1285),
                            CreatedBy = "System",
                            Name = "Portuguese",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1290),
                            CreatedBy = "System",
                            Name = "Arabic",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1294),
                            CreatedBy = "System",
                            Name = "Swedish",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1298),
                            CreatedBy = "System",
                            Name = "Danish",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1302),
                            CreatedBy = "System",
                            Name = "Finnish",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1305),
                            CreatedBy = "System",
                            Name = "Norwegian",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1309),
                            CreatedBy = "System",
                            Name = "Polish",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1313),
                            CreatedBy = "System",
                            Name = "Hungarian",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1317),
                            CreatedBy = "System",
                            Name = "Greek",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1320),
                            CreatedBy = "System",
                            Name = "Hebrew",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1324),
                            CreatedBy = "System",
                            Name = "Turkish",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1328),
                            CreatedBy = "System",
                            Name = "Hindi",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1331),
                            CreatedBy = "System",
                            Name = "Bengali",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1335),
                            CreatedBy = "System",
                            Name = "Urdu",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1339),
                            CreatedBy = "System",
                            Name = "Punjabi",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentMedications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1122),
                            CreatedBy = "System",
                            Name = "Allergists/Immunologists",
                            Status = 0,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1126),
                            CreatedBy = "System",
                            Name = "Anesthesiologists",
                            Status = 0,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1130),
                            CreatedBy = "System",
                            Name = "Cardiologists",
                            Status = 0,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1134),
                            CreatedBy = "System",
                            Name = "Family and General Practitioners",
                            Status = 0,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(1138),
                            CreatedBy = "System",
                            Name = "Neurologists",
                            Status = 0,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 589, DateTimeKind.Local).AddTicks(8297),
                            CreatedBy = "System",
                            Name = "Alberta",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 589, DateTimeKind.Local).AddTicks(8303),
                            CreatedBy = "System",
                            Name = "British Columbia",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 589, DateTimeKind.Local).AddTicks(8308),
                            CreatedBy = "System",
                            Name = "Manitoba",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 589, DateTimeKind.Local).AddTicks(8312),
                            CreatedBy = "System",
                            Name = "New Brunswick",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(515),
                            CreatedBy = "System",
                            Name = "Newfoundland and Labrador",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(521),
                            CreatedBy = "System",
                            Name = "Nova Scotia",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(525),
                            CreatedBy = "System",
                            Name = "Ontario",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(529),
                            CreatedBy = "System",
                            Name = "Prince Edward Island",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(534),
                            CreatedBy = "System",
                            Name = "Quebec",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(538),
                            CreatedBy = "System",
                            Name = "Saskatchewan",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(542),
                            CreatedBy = "System",
                            Name = "Northwest Territories",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(546),
                            CreatedBy = "System",
                            Name = "Nunavut",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 18, 15, 28, 57, 590, DateTimeKind.Local).AddTicks(550),
                            CreatedBy = "System",
                            Name = "Yukon",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChangeRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "da142746-1e3c-4b3a-a269-786e5954f8a9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "da878656-14a9-4213-a216-b331880b8eae",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "a0e483ab-4a68-42f5-ab87-6ac47580be55",
                            Name = "DoctorUnderReview",
                            NormalizedName = "DOCTORUNDERREVIEW"
                        },
                        new
                        {
                            Id = "c4c3991b-6790-47ac-8a47-436048e670fd",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "9fe99b2a-f910-46fe-b245-6721a4f84770",
                            Name = "AdministrativeAssistant",
                            NormalizedName = "ADMINISTRATIVEASSISTANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.City", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Doctor", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.City", "City")
                        .WithMany("Doctors")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("FindMyFamilyDoc.Shared.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorAvailability", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.Doctor", "Doctor")
                        .WithMany("DoctorAvailabilities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorEducationBackground", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.Doctor", "Doctor")
                        .WithMany("DoctorEducationBackgrounds")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorExperience", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.Doctor", "Doctor")
                        .WithMany("Experiences")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorLanguage", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.Doctor", "Doctor")
                        .WithMany("DoctorLanguages")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.Language", "Language")
                        .WithMany("DoctorLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.Doctor", "Doctor")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.Specialty", "Specialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.DoctorStaff", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.Doctor", "Doctor")
                        .WithMany("DoctorStaffs")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("FindMyFamilyDoc.Shared.Models.DoctorStaff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Patient", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("FindMyFamilyDoc.Shared.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.UserRefreshToken", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FindMyFamilyDoc.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.City", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Doctor", b =>
                {
                    b.Navigation("DoctorAvailabilities");

                    b.Navigation("DoctorEducationBackgrounds");

                    b.Navigation("DoctorLanguages");

                    b.Navigation("DoctorSpecialties");

                    b.Navigation("DoctorStaffs");

                    b.Navigation("Experiences");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Language", b =>
                {
                    b.Navigation("DoctorLanguages");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.Specialty", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FindMyFamilyDoc.Shared.Models.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
